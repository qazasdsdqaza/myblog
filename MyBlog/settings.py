"""
Django settings for MyBlog project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7g6mw@*r6k-qm_#r8y^#%i9u1a3(i^nnh4$)3rgw2b8cglv%jv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'compressor',
    'blog',
    'user',
    'ckeditor',
    'ckeditor_uploader',
    'rest_framework',
    'crispy_forms',
    'sorl.thumbnail',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'haystack',

]
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'blog.middleware.SimpleMiddleware',
]

ROOT_URLCONF = 'MyBlog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

            ],

            'builtins': [
                'django.templatetags.static'
            ],
        },
    },
]

WSGI_APPLICATION = 'MyBlog.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'myblog',
        'USER': 'root',
        'PASSWORD': 'mysql123',
        'HOST': '127.0.0.1',
        'PORT': 3306,
    }
}
# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static_new')

AUTH_USER_MODEL = 'user.User'
ALLOW_UPLOAD = ['jpg', 'png', 'jpeg']
LOCAL_APPS = [
    'user.apps.UserConfig',
    'blog.apps.SearchConfig',
]
# DJANGO_COMPRESSOR
COMPRESS_ROOT = BASE_DIR + "static/"

# MEDIA
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
CKEDITOR_UPLOAD_PATH = "upload/"

# DJANGO_REST_FRAMEWORK
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# JWT配置
# JWT_AUTH = {
#     # token过期时间
#     'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
#
#     # 允许刷新
#     'JWT_ALLOW_REFRESH': True,
#
#     # 刷新过期时间
#     'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=1),
#
#     'JWT_AUTH_HEADER_PERFIX': 'JWT',
#
#     'JWT_RESPONSE_PAYLOAD_HANDLER': 'blog.utils.jwt_response_payload_handler',
# }

# Django-ALLAUTH
ACCOUNT_LOGOUT_ON_GET = False  # 用户登出需要确认
ACCOUNT_ALLOW_REGISTRATION = True  # 运行注册
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # 用户可以通过用户名或邮箱登录
ACCOUNT_EMAIL_REQUIRED = True  # 用户必须填邮箱
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # 强制注册邮箱验证(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)
ACCOUNT_ADAPTER = 'blog.adapters.AccountAdapter'
SOCALACCOUNT_ADAPTER = 'blog.adapters.SocialAccountAdapter'

EMAIL_HOST = "smtp.qq.com"
EMAIL_PORT = 25
EMAIL_HOST_USER = "1571311535@qq.com"
EMAIL_HOST_PASSWORD = "zlhwatsivawafidc"  # 这个不是邮箱密码，而是授权码
EMAIL_USE_TLS = True  # 这里必须是 True，否则发送不成功
EMAIL_FROM = "1571311535@qq.com"  # 发件人
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
# 默认发件人 如果不添加DEFAULT_FROM_EMAIL字段可能会导致如下错误:
# 451, b'Sender address format error.', 'webmaster@localhost'
DEFAULT_FROM_EMAIL = "1571311535@qq.com"

AUTHENTICATION_BACKENDS = [
    # django admin所使用的用户登录与django-allauth无关
    'django.contrib.auth.backends.ModelBackend',
    # allauth 身份验证
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Django CRISPY-FORM
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# DJANGO-HAYSTACK
# https://django-haystack.readthedocs.io/en/latest/tutorial.html#installation
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch2_backend.Elasticsearch2SearchEngine',
        'URL': 'http://127.0.0.1:9200/',
        'INDEX_NAME': 'myblog',
    },
}

HAYSTACK_SEARCH_RESULTS_PER_PAGE = 3
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# DJANGO-THUMBNAILS
# THUMBNAILS = {
#     'METADATA': {
#         'BACKEND': 'thumbnails.backends.metadata.DatabaseBackend',
#     },
#     'STORAGE': {
#         'BACKEND': 'django.core.files.storage.FileSystemStorage',
#         # You can also use Amazon S3 or any other Django storage backends
#     },
#     'SIZES': {
#         'small': {
#             'PROCESSORS': [
#                 {'PATH': 'thumbnails.processors.resize', 'width': 10, 'height': 10},
#                 {'PATH': 'thumbnails.processors.crop', 'width': 80, 'height': 80}
#             ],
#             'POST_PROCESSORS': [
#                 {
#                     'PATH': 'thumbnails.post_processors.optimize',
#                     'png_command': 'optipng -force -o7 "%(filename)s"',
#                     'jpg_command': 'jpegoptim -f --strip-all "%(filename)s"',
#                 },
#             ],
#         },
#         'large': {
#             'PROCESSORS': [
#                 {'PATH': 'thumbnails.processors.resize', 'width': 20, 'height': 20},
#                 {'PATH': 'thumbnails.processors.flip', 'direction': 'horizontal'}
#             ],
#         }
#     }
# }
